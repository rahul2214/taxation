{
  "entities": {
    "Customer": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Customer",
      "type": "object",
      "description": "Represents a customer in the TaxEase system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the customer entity."
        },
        "firstName": {
          "type": "string",
          "description": "First name of the customer."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the customer."
        },
        "email": {
          "type": "string",
          "description": "Email address of the customer.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the customer."
        },
        "address": {
          "type": "string",
          "description": "Address of the customer."
        },
        "signupDate": {
          "type": "string",
          "description": "Date when the customer signed up.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "signupDate"
      ]
    },
    "TaxDocument": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TaxDocument",
      "type": "object",
      "description": "Represents a tax document uploaded by a customer.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the tax document."
        },
        "customerId": {
          "type": "string",
          "description": "Reference to Customer. (Relationship: Customer 1:N TaxDocument)"
        },
        "documentName": {
          "type": "string",
          "description": "Name of the tax document."
        },
        "uploadDate": {
          "type": "string",
          "description": "Date when the tax document was uploaded.",
          "format": "date-time"
        },
        "fileUrl": {
          "type": "string",
          "description": "URL of the uploaded tax document in Firebase Storage.",
          "format": "uri"
        },
        "documentType": {
          "type": "string",
          "description": "Type of the tax document (e.g., W-2, 1099)."
        },
        "taxYear": {
          "type": "number",
          "description": "The tax year that this document applies to"
        }
      },
      "required": [
        "id",
        "customerId",
        "documentName",
        "uploadDate",
        "fileUrl",
        "documentType"
      ]
    },
    "Appointment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Appointment",
      "type": "object",
      "description": "Represents a scheduled appointment between a customer and a tax professional.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the appointment."
        },
        "customerId": {
          "type": "string",
          "description": "Reference to Customer. (Relationship: Customer 1:N Appointment)"
        },
        "appointmentDate": {
          "type": "string",
          "description": "Date and time of the appointment.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Status of the appointment (e.g., Scheduled, Confirmed, Completed, Cancelled)."
        },
        "notes": {
          "type": "string",
          "description": "Any notes or comments related to the appointment."
        }
      },
      "required": [
        "id",
        "customerId",
        "appointmentDate",
        "status"
      ]
    },
    "Referral": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Referral",
      "type": "object",
      "description": "Represents a referral made by a customer.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the referral."
        },
        "referrerId": {
          "type": "string",
          "description": "Reference to Customer who made the referral. (Relationship: Customer 1:N Referral)"
        },
        "referredEmail": {
          "type": "string",
          "description": "Email address of the person who was referred.",
          "format": "email"
        },
        "referralDate": {
          "type": "string",
          "description": "Date when the referral was made.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Status of the referral (e.g., Pending, Accepted, Declined)."
        },
        "referredCustomerId": {
          "type": "string",
          "description": "Reference to Customer who was referred, if they signed up. (Relationship: Referral 1:1 Customer)"
        }
      },
      "required": [
        "id",
        "referrerId",
        "referredEmail",
        "referralDate",
        "status"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/customers/{customerId}",
        "definition": {
          "entityName": "Customer",
          "schema": {
            "$ref": "#/backend/entities/Customer"
          },
          "description": "Stores customer profiles.  Each document represents a single customer.",
          "params": [
            {
              "name": "customerId",
              "description": "Unique identifier for the customer."
            }
          ]
        }
      },
      {
        "path": "/customers/{customerId}/taxDocuments/{taxDocumentId}",
        "definition": {
          "entityName": "TaxDocument",
          "schema": {
            "$ref": "#/backend/entities/TaxDocument"
          },
          "description": "Stores tax documents uploaded by customers. The customerId in the path ensures ownership.",
          "params": [
            {
              "name": "customerId",
              "description": "Unique identifier for the customer who owns the document."
            },
            {
              "name": "taxDocumentId",
              "description": "Unique identifier for the tax document."
            }
          ]
        }
      },
      {
        "path": "/customers/{customerId}/appointments/{appointmentId}",
        "definition": {
          "entityName": "Appointment",
          "schema": {
            "$ref": "#/backend/entities/Appointment"
          },
          "description": "Stores appointment information for customers.  The customerId in the path ensures ownership.",
          "params": [
            {
              "name": "customerId",
              "description": "Unique identifier for the customer who scheduled the appointment."
            },
            {
              "name": "appointmentId",
              "description": "Unique identifier for the appointment."
            }
          ]
        }
      },
      {
        "path": "/customers/{customerId}/referrals/{referralId}",
        "definition": {
          "entityName": "Referral",
          "schema": {
            "$ref": "#/backend/entities/Referral"
          },
          "description": "Stores referral information. The customerId represents the referrer. ",
          "params": [
            {
              "name": "customerId",
              "description": "Unique identifier for the customer who made the referral."
            },
            {
              "name": "referralId",
              "description": "Unique identifier for the referral."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure Authorization Independence and facilitate secure list operations (QAPs). It leverages path-based ownership and denormalization to avoid using `get()` calls in security rules.\n\n1.  **Customers:**  Customers are stored under `/customers/{customerId}`. Tax documents, appointments, and referrals are stored as subcollections under each customer document. This enables easy management of customer-specific data and leverages Firestore's indexing capabilities for efficient querying.\n\n2.  **Tax Documents:** Tax documents are stored in `/customers/{customerId}/taxDocuments/{taxDocumentId}`. This structure provides clear ownership and enables secure listing of tax documents for a specific customer.\n\n3.  **Appointments:** Appointments are stored in `/customers/{customerId}/appointments/{appointmentId}`. This path-based ownership facilitates secure listing of appointments for a specific customer.\n\n4.  **Referrals:** Referrals are stored in `/customers/{customerId}/referrals/{referralId}`. Similar to tax documents and appointments, this structure provides secure access to referrals made by a specific customer.\n\nThis design adheres to Authorization Independence by avoiding `get()` calls in security rules, as all necessary information for authorization is contained within the document or can be derived from the path itself.  QAPs are supported through structural segregation; each customer's data is stored separately, enabling secure listing operations at the customer level."
  }
}