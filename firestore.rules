/**
 * @fileoverview Firestore Security Rules for TaxEase application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for customer profiles and their associated tax documents.
 * Appointments and referrals are handled as top-level collections, allowing for public reads with controlled writes.
 *
 * Data Structure:
 * - /customers/{customerId}: Stores customer profiles. Only the customer can read/write their own profile.
 * - /customers/{customerId}/taxDocuments/{taxDocumentId}: Stores tax documents. Only the customer can read/write their own documents.
 * - /appointments/{appointmentId}: Stores appointment requests. Anyone can read. Only authenticated users can create, update or delete.
 * - /referrals/{referralId}: Stores referrals. Anyone can read. Only authenticated users can create, update or delete.
 *
 * Key Security Decisions:
 * - Customer listing is disallowed.
 * - Public read access is granted for appointments and referrals, assuming no sensitive information is exposed.
 * - Write access to appointments and referrals requires authentication.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure customer profiles. Only the customer can read/write their own profile.
     * @path /customers/{customerId}
     * @allow (create) - User with UID 'user_abc' can create a customer document where customerId == 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, or delete the customer document where customerId == 'user_abc'.
     * @deny (create) - User with UID 'user_def' cannot create a customer document where customerId == 'user_abc'.
     * @deny (get, update, delete) - User with UID 'user_def' cannot get, update, or delete the customer document where customerId == 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /customers/{customerId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(customerId);
      allow list: if false;
      allow create: if isOwner(customerId);
      allow update: if isExistingOwner(customerId);
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Secure tax documents. Only the customer who owns the document can read/write it.
     * @path /customers/{customerId}/taxDocuments/{taxDocumentId}
     * @allow (create) - User with UID 'user_abc' can create a tax document under customerId 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, or delete a tax document under customerId 'user_abc'.
     * @deny (create) - User with UID 'user_def' cannot create a tax document under customerId 'user_abc'.
     * @deny (get, update, delete) - User with UID 'user_def' cannot get, update, or delete a tax document under customerId 'user_abc'.
     * @principle Enforces document ownership and relational integrity between customer and tax documents.
     */
    match /customers/{customerId}/taxDocuments/{taxDocumentId} {
      function isOwner(customerId) {
        return request.auth.uid == customerId;
      }

      function isExistingOwner(customerId) {
          return isOwner(customerId) && resource != null;
      }
      allow get: if isOwner(customerId);
      allow list: if isOwner(customerId);
      allow create: if isOwner(customerId);
      allow update: if isExistingOwner(customerId);
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Allows public read access to appointments while restricting write access to authenticated users.
     * @path /appointments/{appointmentId}
     * @allow (get, list) - Any user (authenticated or not) can read appointment data.
     * @allow (create) - Only authenticated users can create appointments.
     * @deny (create) - Unauthenticated users cannot create appointments.
     * @principle Allows public read access with authenticated write access.
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to referrals while restricting write access to authenticated users.
     * @path /referrals/{referralId}
     * @allow (get, list) - Any user (authenticated or not) can read referral data.
     * @allow (create) - Only authenticated users can create referrals.
     * @deny (create) - Unauthenticated users cannot create referrals.
     * @principle Allows public read access with authenticated write access.
     */
    match /referrals/{referralId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}