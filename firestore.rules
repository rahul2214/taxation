/**
 * @fileoverview Firestore Security Rules for TaxEase application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on a combination of user authentication and data ownership. It aims to balance security with the need for public accessibility where appropriate.
 *
 * Data Structure:
 * - /customers/{customerId}: Stores customer profiles. Access is restricted to the owner (the customer themselves).
 * - /customers/{customerId}/taxDocuments/{taxDocumentId}: Stores tax documents. Access is restricted to the owner customer.
 * - /appointments/{appointmentId}: Stores appointment requests. Public creation is allowed, but updates and deletes are not permitted, which might require further refinement in future versions.
 * - /referrals/{referralId}: Stores referrals. Public creation is allowed, but updates and deletes are not permitted, which might require further refinement in future versions.
 * - /siteSettings/taxForms: Stores global site settings. Read-only access for all users.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed to protect user privacy.
 * - Public read access is granted to the /appointments and /referrals collections to allow open creation.
 *
 * Denormalization for Authorization:
 * - The 'customerId' in the /customers/{customerId}/taxDocuments/{taxDocumentId} path is used to enforce ownership, preventing unauthorized access to tax documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages customer profiles, ensuring only the authenticated user can access their own data.
     * @path /customers/{customerId}
     * @allow (create) Signed-in user creates their own profile (customerId matches auth.uid).
     * @allow (get, list, update, delete) Signed-in user accesses their own profile (customerId matches auth.uid).
     * @deny (create) Signed-in user attempts to create a profile with a mismatched customerId.
     * @deny (get, list, update, delete) Signed-in user attempts to access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /customers/{customerId} {
      // Utility function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Utility function to check if the user is the owner of the resource
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Utility function to check if the user is the owner of the resource and the resource exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(customerId);
      allow list: if false; // Listing all customers is not permitted.
      allow create: if isSignedIn() && isOwner(customerId) && request.resource.data.id == customerId;
      allow update: if isExistingOwner(customerId) && request.resource.data.id == resource.data.id; //Enforce immutable id
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Manages tax documents for a specific customer, ensuring only the customer can access their own documents.
     * @path /customers/{customerId}/taxDocuments/{taxDocumentId}
     * @allow (create) Signed-in user creates a tax document under their customer profile (customerId matches auth.uid).
     * @allow (get, list, update, delete) Signed-in user accesses a tax document under their customer profile (customerId matches auth.uid).
     * @deny (create) Signed-in user attempts to create a tax document under another user's profile.
     * @deny (get, list, update, delete) Signed-in user attempts to access a tax document under another user's profile.
     * @principle Enforces document ownership for all operations, using path-based authorization.
     */
    match /customers/{customerId}/taxDocuments/{taxDocumentId} {
      // Utility function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Utility function to check if the user is the owner of the resource
      function isOwner(customerId) {
        return request.auth.uid == customerId;
      }

       // Utility function to check if the user is the owner of the resource and the resource exists
      function isExistingOwner(customerId) {
        return isOwner(customerId) && resource != null;
      }

      allow get: if isOwner(customerId);
      allow list: if isOwner(customerId);
      allow create: if isSignedIn() && isOwner(customerId) && request.resource.data.customerId == customerId;
      allow update: if isExistingOwner(customerId) && request.resource.data.customerId == resource.data.customerId; //Enforce immutable customerId
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Manages appointments. Allows public creation, but restricts updates and deletes.
     * @path /appointments/{appointmentId}
     * @allow (create) Any user (signed-in or not) can create an appointment.
     * @deny (get, list, update, delete) No user can retrieve, list, update, or delete an appointment.
     * @principle Allows public creation for appointments, but restricts further modifications.
     */
    match /appointments/{appointmentId} {
      allow get: if true;
      allow list: if false;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages referrals. Allows public creation, but restricts updates and deletes.
     * @path /referrals/{referralId}
     * @allow (create) Any user (signed-in or not) can create a referral.
     * @deny (get, list, update, delete) No user can retrieve, list, update, or delete a referral.
     * @principle Allows public creation for referrals, but restricts further modifications.
     */
    match /referrals/{referralId} {
      allow get: if true;
      allow list: if false;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages site settings, providing public read-only access.
     * @path /siteSettings/taxForms
     * @allow (get, list) Any user (signed-in or not) can read site settings.
     * @deny (create, update, delete) No user can create, update, or delete site settings.
     * @principle Provides public read access to site settings, restricting write access.
     */
    match /siteSettings/taxForms {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}