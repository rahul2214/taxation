/**
 * @fileoverview Firestore Security Rules for TaxEase application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, where each customer 
 * can only access their own data and associated tax documents, appointments, and referrals.
 *
 * Data Structure:
 * - /customers/{customerId}: Stores customer profiles.
 * - /customers/{customerId}/taxDocuments/{taxDocumentId}: Stores tax documents owned by the customer.
 * - /customers/{customerId}/appointments/{appointmentId}: Stores appointments scheduled by the customer.
 * - /customers/{customerId}/referrals/{referralId}: Stores referrals made by the customer.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations are protected by an authorization check based on the customer ID in the path.
 * - No schema validation is performed beyond ensuring that the path-based customerId matches the document's customerId field.
 * - Appointments and Referrals are being stored as subcollections of the Customer to ensure Authorization Independence.
 *
 * Denormalization for Authorization:
 * - The `customerId` is used in the path and MUST also be present in the document data for `create` operations. This ensures consistency and allows for efficient authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the customers collection.
     * @path /customers/{customerId}
     * @allow (create) Signed-in user creates their own customer document.
     * @deny (create) Attempt to create a customer document with a mismatched customer ID.
     * @allow (get) Signed-in user reads their own customer document.
     * @deny (get) Attempt to read another user's customer document.
     * @allow (list) Listing of all customers is disallowed.
     * @deny (update) Attempt to update another user's customer document.
     * @deny (delete) Attempt to delete another user's customer document.
     * @principle Enforces document ownership for writes; restricts access to a user's own data.
     */
    match /customers/{customerId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(customerId);
      allow list: if false;
      allow create: if isOwner(customerId) && request.resource.data.id == customerId;
      allow update: if isOwner(customerId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isOwner(customerId) && resource != null;
    }

    /**
     * @description Protects the taxDocuments subcollection.
     * @path /customers/{customerId}/taxDocuments/{taxDocumentId}
     * @allow (create) Signed-in user creates a tax document under their own customer document.
     * @deny (create) Attempt to create a tax document under another user's customer document.
     * @allow (get) Signed-in user reads their own tax document.
     * @deny (get) Attempt to read another user's tax document.
     * @allow (list) Signed-in user lists their own tax documents.
     * @deny (update) Attempt to update another user's tax document.
     * @deny (delete) Attempt to delete another user's tax document.
     * @principle Enforces document ownership for writes; restricts access to a user's own data tree.
     */
    match /customers/{customerId}/taxDocuments/{taxDocumentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(customerId);
      allow list: if isOwner(customerId);
      allow create: if isOwner(customerId) && request.resource.data.customerId == customerId;
      allow update: if isOwner(customerId) && resource != null && request.resource.data.customerId == resource.data.customerId;
      allow delete: if isOwner(customerId) && resource != null;
    }

     /**
      * @description Protects the appointments subcollection.
      * @path /customers/{customerId}/appointments/{appointmentId}
      * @allow (create) Signed-in user creates an appointment under their own customer document.
      * @deny (create) Attempt to create an appointment under another user's customer document.
      * @allow (get) Signed-in user reads their own appointment.
      * @deny (get) Attempt to read another user's appointment.
      * @allow (list) Signed-in user lists their own appointments.
      * @deny (update) Attempt to update another user's appointment.
      * @deny (delete) Attempt to delete another user's appointment.
      * @principle Enforces document ownership for writes; restricts access to a user's own data tree.
      */
    match /customers/{customerId}/appointments/{appointmentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(customerId);
      allow list: if isOwner(customerId);
      allow create: if isOwner(customerId) && request.resource.data.customerId == customerId;
      allow update: if isOwner(customerId) && resource != null && request.resource.data.customerId == resource.data.customerId;
      allow delete: if isOwner(customerId) && resource != null;
    }

    /**
     * @description Protects the referrals subcollection.
     * @path /customers/{customerId}/referrals/{referralId}
     * @allow (create) Signed-in user creates a referral under their own customer document.
     * @deny (create) Attempt to create a referral under another user's customer document.
     * @allow (get) Signed-in user reads their own referral.
     * @deny (get) Attempt to read another user's referral.
     * @allow (list) Signed-in user lists their own referrals.
     * @deny (update) Attempt to update another user's referral.
     * @deny (delete) Attempt to delete another user's referral.
     * @principle Enforces document ownership for writes; restricts access to a user's own data tree.
     */
    match /customers/{customerId}/referrals/{referralId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(customerId);
      allow list: if isOwner(customerId);
      allow create: if isOwner(customerId) && request.resource.data.referrerId == customerId;
      allow update: if isOwner(customerId) && resource != null && request.resource.data.referrerId == resource.data.referrerId;
      allow delete: if isOwner(customerId) && resource != null;
    }
  }
}