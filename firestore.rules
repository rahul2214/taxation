/**
 * @fileoverview Firestore Security Rules for TaxEase application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on a combination of
 * ownership and public availability, tailored to the specific needs of
 * each collection. We denormalize key authorization data onto documents
 * to avoid costly `get()` calls in security rules.
 *
 * Data Structure:
 * - /customers/{customerId}: Stores customer profiles, secured by owner-only access.
 * - /customers/{customerId}/taxDocuments/{taxDocumentId}: Stores tax documents, secured by owner-only access via customerId.
 * - /appointments/{appointmentId}: Stores appointment requests, publicly accessible for reads, but only allow writes.
 * - /referrals/{referralId}: Stores referrals, publicly accessible for reads, but only allow writes.
 * - /siteSettings/taxForms: Stores site settings, publicly readable.
 *
 * Key Security Decisions:
 * - Listing of customers is disallowed to prevent unauthorized data enumeration.
 * - Appointments and Referrals can be read by anyone, to facilitate easy public access.
 * - All write operations are carefully validated against the current user's authentication state.
 *
 * Denormalization for Authorization:
 * - Tax documents are stored under the customer's document to simplify ownership checks. The tax document does contain the `customerId` field, so it can be easily validated.
 *
 * Structural Segregation:
 * - Private customer data (tax documents) is stored in a subcollection, separate from public collections like appointments and referrals.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure customer profiles. Only the owner (the user with the matching UID) can read or write their own profile.
     * @path /customers/{customerId}
     * @allow (create, get, update, delete, list) if the user's UID matches the customerId.
     * @deny (create) if the user's UID does not match the customerId.
     * @principle Enforces document ownership for all operations.
     */
    match /customers/{customerId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(customerId);
      // Prevent listing of all users.  This is a security best practice.
      allow list: if false;
      allow create: if isOwner(customerId) && request.resource.data.id == customerId;
      allow update: if isExistingOwner(customerId) && resource.data.id == customerId;
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Secure tax documents. Only the owner (the customer) can read, write, or delete their tax documents.
     * @path /customers/{customerId}/taxDocuments/{taxDocumentId}
     * @allow (create, get, update, delete, list) if the user is the owner of the customer document and the taxDocument.customerId == customerId
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /customers/{customerId}/taxDocuments/{taxDocumentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(customerId);
      allow list: if isOwner(customerId);
      allow create: if isOwner(customerId) && request.resource.data.customerId == customerId;
      allow update: if isExistingOwner(customerId) && resource.data.customerId == customerId;
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Allow public read access to appointments, but only allow authenticated users to create, update or delete appointments.
     * @path /appointments/{appointmentId}
     * @allow (get, list) to anyone.
     * @allow (create) if the user is signed in.
     * @deny (update, delete) to anyone.
     * @principle Allows public reads while restricting write access to authenticated users.
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allow public read access to referrals, but only allow authenticated users to create, update, or delete referrals.
     * @path /referrals/{referralId}
     * @allow (get, list) to anyone.
     * @allow (create) if the user is signed in.
     * @deny (update, delete) to anyone.
     * @principle Allows public reads while restricting write access to authenticated users.
     */
    match /referrals/{referralId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allow public read access to site settings. Write access is not granted, effectively making it read-only.
     * @path /siteSettings/taxForms
     * @allow (get) to anyone.
     * @deny (create, update, delete, list) to anyone.
     * @principle Allows public reads, prevents all writes.
     */
    match /siteSettings/taxForms {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}