/**
 * @fileoverview Firestore Security Rules for TaxEase application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and
 * ownership. It enforces a strict separation of concerns between public
 * and private data. Data validation is relaxed to allow for rapid
 * prototyping.
 *
 * Data Structure:
 * - /customers/{customerId}: Stores customer profiles; protected by ownership.
 * - /customers/{customerId}/taxDocuments/{taxDocumentId}: Stores tax documents,
 *   protected by ownership.
 * - /appointments/{appointmentId}: Top-level collection for all appointments,
 *   open for creates, but secured for updates and deletes.
 * - /referrals/{referralId}: Top-level collection for all referrals,
 *   open for creates, but secured for updates and deletes.
 * - /siteSettings/taxForms: Singleton document for global settings, read-only.
 *
 * Key Security Decisions:
 * - Customers can only access their own profiles and tax documents.
 * - Anyone can create appointments and referrals.
 * - Only authenticated users can update or delete appointments and referrals.
 * - Listing of referrals is denied.
 * - Site settings are publicly readable but not writable.
 *
 * Denormalization for Authorization:
 *  - The `TaxDocument` entity contains `customerId`, which is used to
 *    enforce ownership within the `customers/{customerId}` subcollection.
 *
 * Structural Segregation:
 *  - Public data (appointments, referrals) is stored in top-level
 *    collections, while private data (customer profiles, tax documents) is
 *    stored under the `/customers/{customerId}` path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to customer profile documents.
     * @path /customers/{customerId}
     * @allow (create) - Authenticated user creates their own profile with matching ID.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - Unauthenticated user attempts to create a customer profile.
     * @deny (get, update, delete) - Authenticated user tries to access another user's profile.
     * @principle Enforces document ownership for reads and writes.
     */
    match /customers/{customerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(customerId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(customerId) && request.resource.data.id == customerId;
      allow update: if isExistingOwner(customerId);
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Controls access to tax documents uploaded by customers.
     * @path /customers/{customerId}/taxDocuments/{taxDocumentId}
     * @allow (create, get, update, delete) - Authenticated user owns the tax document.
     * @deny (create, get, update, delete) - Authenticated user tries to access another user's tax documents.
     * @principle Enforces document ownership for reads and writes within a user's data tree.
     */
    match /customers/{customerId}/taxDocuments/{taxDocumentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(customerId) {
        return request.auth.uid == customerId;
      }

        function isExistingOwner(customerId) {
          return isOwner(customerId) && resource != null;
        }

      allow get: if isOwner(customerId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(customerId);
      allow update: if isExistingOwner(customerId);
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Controls access to appointment documents. Anyone can create an appointment.
     * @path /appointments/{appointmentId}
     * @allow (create) - Any user (signed in or not) can create an appointment.
     * @allow (get, list) - Any user can read appointment data.
     * @allow (update, delete) - Only authenticated users can update or delete.
     * @principle Allows public read access, but secures writes to authenticated users.
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to referral documents. Anyone can create a referral.
     * @path /referrals/{referralId}
     * @allow (create) - Any user (signed in or not) can create a referral.
     * @allow (get) - Any user can read referral data.
     * @allow (update, delete) - Only authenticated users can update or delete.
     * @deny (list) - Listing referrals is not allowed.
     * @principle Allows public create, but secures updates and deletes to authenticated users.
     */
    match /referrals/{referralId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if false;
      allow create: if true;
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to the site settings document.
     * @path /siteSettings/taxForms
     * @allow (get, list) - Any user can read the site settings.
     * @deny (create, update, delete) - No one can modify the site settings.
     * @principle Provides public read access to site configuration.
     */
    match /siteSettings/taxForms {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}