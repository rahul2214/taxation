/**
 * @fileoverview Firestore Security Rules for TaxEase application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for customer profiles and their associated tax documents.
 * Appointments and referrals are in top-level collections and can be created by anyone, including unauthenticated users.
 *
 * Data Structure:
 * - /customers/{customerId}: Stores customer profiles.
 * - /customers/{customerId}/taxDocuments/{taxDocumentId}: Stores tax documents owned by a specific customer.
 * - /appointments/{appointmentId}: Stores appointment requests.
 * - /referrals/{referralId}: Stores referrals.
 *
 * Key Security Decisions:
 * - Customers can only read and write their own profile data.
 * - Customers can only manage their own tax documents.
 * - Anyone, including unauthenticated users, can create appointments and referrals.
 * - No listing is allowed for the customers collection.
 *
 * Denormalization for Authorization:
 * - The `customerId` field in `TaxDocument` is used to enforce ownership, avoiding costly `get()` calls to the `customers` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to customer profiles. Customers can only read and write their own profile.
     * @path /customers/{customerId}
     * @allow (create) User with UID 'user_abc' can create a customer profile with ID 'user_abc'.
     * @allow (get) User with UID 'user_abc' can read the customer profile with ID 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update the customer profile with ID 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete the customer profile with ID 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a customer profile with ID 'user_abc'.
     * @deny (get) User with UID 'user_xyz' cannot read the customer profile with ID 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update the customer profile with ID 'user_abc'.
     * @deny (delete) User with UID 'user_xyz' cannot delete the customer profile with ID 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /customers/{customerId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(customerId);
      allow list: if false;
      allow create: if isOwner(customerId) && request.resource.data.id == customerId;
      allow update: if isExistingOwner(customerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Controls access to tax documents. Customers can only manage their own tax documents.
     * @path /customers/{customerId}/taxDocuments/{taxDocumentId}
     * @allow (create) User with UID 'user_abc' can create a tax document under /customers/user_abc/.
     * @allow (get) User with UID 'user_abc' can read a tax document under /customers/user_abc/.
     * @allow (update) User with UID 'user_abc' can update a tax document under /customers/user_abc/.
     * @allow (delete) User with UID 'user_abc' can delete a tax document under /customers/user_abc/.
     * @deny (create) User with UID 'user_xyz' cannot create a tax document under /customers/user_abc/.
     * @deny (get) User with UID 'user_xyz' cannot read a tax document under /customers/user_abc/.
     * @deny (update) User with UID 'user_xyz' cannot update a tax document under /customers/user_abc/.
     * @deny (delete) User with UID 'user_xyz' cannot delete a tax document under /customers/user_abc/.
     * @principle Enforces document ownership for writes.
     */
    match /customers/{customerId}/taxDocuments/{taxDocumentId} {
      function isOwner(customerId) {
        return request.auth != null && request.auth.uid == customerId;
      }

      function isExistingOwner(customerId) {
        return isOwner(customerId) && resource != null;
      }

      allow get: if isOwner(customerId);
      allow list: if isOwner(customerId);
      allow create: if isOwner(customerId) && request.resource.data.customerId == customerId;
      allow update: if isExistingOwner(customerId) && request.resource.data.customerId == resource.data.customerId;
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Controls access to appointments. Anyone can create appointments.
     * @path /appointments/{appointmentId}
     * @allow (create) Any user (or unauthenticated user) can create an appointment.
     * @allow (get) Any user can read an appointment.
     * @allow (list) Any user can list appointments.
     * @deny (update) No one can update an appointment. // TODO: Add role-based access for admins.
     * @deny (delete) No one can delete an appointment. // TODO: Add role-based access for admins.
     * @principle Allows public creation of appointments; restricts updates and deletes.
     */
    match /appointments/{appointmentId} {
      allow get, list, create: if true;
      allow update, delete: if false; // TODO: Add role-based access for admins.
    }

    /**
     * @description Controls access to referrals. Anyone can create referrals.
     * @path /referrals/{referralId}
     * @allow (create) Any user (or unauthenticated user) can create a referral.
     * @allow (get) Any user can read a referral.
     * @allow (list) Any user can list referrals.
     * @deny (update) No one can update a referral. // TODO: Add role-based access for admins.
     * @deny (delete) No one can delete a referral. // TODO: Add role-based access for admins.
     * @principle Allows public creation of referrals; restricts updates and deletes.
     */
    match /referrals/{referralId} {
      allow get, list, create: if true;
      allow update, delete: if false; // TODO: Add role-based access for admins.
    }
  }
}