/**
 * @fileoverview Firestore Security Rules for TaxEase Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for customer data,
 * while allowing unauthenticated access for creating appointment and referral records.
 *
 * Data Structure:
 * - Customers: Stored under `/customers/{customerId}`. Only the customer can read/write their profile.
 * - Tax Documents: Stored under `/customers/{customerId}/taxDocuments/{taxDocumentId}`. Only the customer can read/write these.
 * - Appointments: Stored under `/customers/{customerId}/appointments/{appointmentId}`. Anyone can create these, but ownership is validated.
 * - Referrals: Stored under `/customers/{customerId}/referrals/{referralId}`. Anyone can create these, but ownership is validated.
 *
 * Key Security Decisions:
 * - User listing is disabled for the `/customers` collection.
 * - Unauthenticated users can create appointment and referral records, but the `customerId` field must match the path.
 * - Updates and deletes on customer-owned data require verification of ownership and existence.
 *
 * Denormalization for Authorization:
 * - The `customerId` is used in subcollection paths to enforce ownership without needing `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces owner-only access to customer profiles.
     * @path /customers/{customerId}
     * @allow (get) User with ID 'user_abc' can read their own profile.
     * @allow (create) User with ID 'user_abc' can create their own profile.
     * @allow (update) User with ID 'user_abc' can update their own profile.
     * @allow (delete) User with ID 'user_abc' can delete their own profile.
     * @deny (get) User with ID 'user_xyz' cannot read 'user_abc' profile.
     * @deny (create) User with ID 'user_xyz' cannot create 'user_abc' profile.
     * @deny (update) User with ID 'user_xyz' cannot update 'user_abc' profile.
     * @deny (delete) User with ID 'user_xyz' cannot delete 'user_abc' profile.
     * @principle Enforces document ownership for reads and writes.
     */
    match /customers/{customerId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(customerId);
      allow list: if false;
      allow create: if isOwner(customerId);
      allow update: if isExistingOwner(customerId);
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Enforces owner-only access to tax documents within a customer's profile.
     * @path /customers/{customerId}/taxDocuments/{taxDocumentId}
     * @allow (get) User with ID 'user_abc' can read their own tax document.
     * @allow (create) User with ID 'user_abc' can create a tax document.
     * @allow (update) User with ID 'user_abc' can update their own tax document.
     * @allow (delete) User with ID 'user_abc' can delete their own tax document.
     * @deny (get) User with ID 'user_xyz' cannot read 'user_abc' tax document.
     * @deny (create) User with ID 'user_xyz' cannot create tax document for 'user_abc'.
     * @deny (update) User with ID 'user_xyz' cannot update 'user_abc' tax document.
     * @deny (delete) User with ID 'user_xyz' cannot delete 'user_abc' tax document.
     * @principle Enforces document ownership for reads and writes, relational integrity.
     */
    match /customers/{customerId}/taxDocuments/{taxDocumentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(customerId);
      allow list: if isOwner(customerId);
      allow create: if isOwner(customerId) && request.resource.data.customerId == customerId;
      allow update: if isExistingOwner(customerId) && request.resource.data.customerId == customerId;
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Allows anyone to create appointments, but enforces ownership and existence for updates and deletes.
     * @path /customers/{customerId}/appointments/{appointmentId}
     * @allow (get) User with ID 'user_abc' can read their own appointment.
     * @allow (create) Unauthenticated user can create appointment for customer 'user_abc'.
     * @allow (update) User with ID 'user_abc' can update their own appointment.
     * @allow (delete) User with ID 'user_abc' can delete their own appointment.
     * @deny (get) User with ID 'user_xyz' cannot read 'user_abc' appointment.
     * @deny (create) User with ID 'user_xyz' cannot create appointment for 'user_abc' with mismatched customerId.
     * @deny (update) User with ID 'user_xyz' cannot update 'user_abc' appointment.
     * @deny (delete) User with ID 'user_xyz' cannot delete 'user_abc' appointment.
     * @principle Allows public creation, enforces document ownership for other operations.
     */
    match /customers/{customerId}/appointments/{appointmentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(customerId);
      allow list: if isOwner(customerId);
      allow create: if request.resource.data.customerId == customerId;
      allow update: if isExistingOwner(customerId) && request.resource.data.customerId == customerId;
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Allows anyone to create referrals, but enforces ownership and existence for updates and deletes.
     * @path /customers/{customerId}/referrals/{referralId}
     * @allow (get) User with ID 'user_abc' can read their own referral.
     * @allow (create) Unauthenticated user can create referral for customer 'user_abc'.
     * @allow (update) User with ID 'user_abc' can update their own referral.
     * @allow (delete) User with ID 'user_abc' can delete their own referral.
     * @deny (get) User with ID 'user_xyz' cannot read 'user_abc' referral.
     * @deny (create) User with ID 'user_xyz' cannot create referral for 'user_abc' with mismatched customerId.
     * @deny (update) User with ID 'user_xyz' cannot update 'user_abc' referral.
     * @deny (delete) User with ID 'user_xyz' cannot delete 'user_abc' referral.
     * @principle Allows public creation, enforces document ownership for other operations.
     */
    match /customers/{customerId}/referrals/{referralId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(customerId);
      allow list: if isOwner(customerId);
      allow create: if request.resource.data.referrerId == customerId;
      allow update: if isExistingOwner(customerId) && request.resource.data.referrerId == customerId;
      allow delete: if isExistingOwner(customerId);
    }
  }
}