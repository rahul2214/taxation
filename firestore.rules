/**
 * @fileoverview Firestore Security Rules for TaxEase application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on a combination of
 * ownership and public availability, tailored to the specific collection.
 *
 * Data Structure:
 * - /customers/{customerId}: Stores customer profiles. Access is restricted to the owner.
 * - /customers/{customerId}/taxDocuments/{taxDocumentId}: Stores tax documents. Access is restricted to the owner.
 * - /appointments/{appointmentId}: Stores appointment requests. Public reads, but only authenticated users can create them.
 * - /referrals/{referralId}: Stores referrals. Public reads, but only authenticated users can create them.
 * - /siteSettings/taxForms: Stores global settings. Publicly readable, no writes allowed.
 *
 * Key Security Decisions:
 * - Customers can only access their own profile data and tax documents.
 * - Appointments and Referrals can be created by any authenticated user.
 * - Listing of all referrals is not allowed.
 * - Global site settings are publicly readable.
 *
 * Denormalization for Authorization: N/A
 * This ruleset avoids `get()` calls by relying on path-based authorization and validating the `customerId` field on `create` operations.
 *
 * Structural Segregation:
 * Publicly accessible data (global settings) is stored in a separate collection from private user data (customer profiles and tax documents).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to customer profiles.
     * @path /customers/{customerId}
     * @allow (create, update, delete): Authenticated user with UID matching the customerId can perform these operations.
     * @allow (get, list): Authenticated user with UID matching the customerId can perform these operations.
     * @deny (create, update, delete): Authenticated user with UID not matching the customerId cannot perform these operations.
     * @deny (get, list): Authenticated user with UID not matching the customerId cannot perform these operations.
     * @principle Enforces document ownership: Only the user with the matching UID can access their profile.
     */
    match /customers/{customerId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(customerId);
      allow list: if false; // Prevent listing all customers

      allow create: if isOwner(customerId) && request.resource.data.id == customerId;
      allow update: if isExistingOwner(customerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Controls access to tax documents uploaded by customers.
     * @path /customers/{customerId}/taxDocuments/{taxDocumentId}
     * @allow (create, update, delete): Authenticated user with UID matching the customerId can perform these operations.
     * @allow (get, list): Authenticated user with UID matching the customerId can perform these operations.
     * @deny (create, update, delete): Authenticated user with UID not matching the customerId cannot perform these operations.
     * @deny (get, list): Authenticated user with UID not matching the customerId cannot perform these operations.
     * @principle Enforces document ownership: Only the owner can access their tax documents.
     */
    match /customers/{customerId}/taxDocuments/{taxDocumentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(customerId);
      allow list: if isOwner(customerId);

      allow create: if isOwner(customerId) && request.resource.data.customerId == customerId;
      allow update: if isExistingOwner(customerId) && resource.data.customerId == customerId;
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Controls access to appointments.
     * @path /appointments/{appointmentId}
     * @allow (create): Any authenticated user can create an appointment.
     * @allow (get, list): Public read access for all appointments.
     * @deny (update, delete): No updates or deletes allowed.
     * @principle Allows public reads and authenticated creates for appointments.
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to referrals.
     * @path /referrals/{referralId}
     * @allow (create): Any authenticated user can create a referral.
     * @allow (get): Public read access for individual referrals.
     * @deny (list): Listing all referrals is not allowed
     * @deny (update, delete): No updates or deletes allowed.
     * @principle Allows public reads and authenticated creates for referrals.
     */
    match /referrals/{referralId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if false;

      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to site settings (tax forms).
     * @path /siteSettings/taxForms
     * @allow (get): Public read access to site settings.
     * @deny (create, update, delete, list): No writes or listing allowed.
     * @principle Allows public reads for global site settings.
     */
    match /siteSettings/taxForms {
      allow get: if true;
      allow list: if false;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}