rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to customer profile documents.
     * @path /customers/{customerId}
     * @allow (create) - Authenticated user creates their own profile where customerId == auth.uid.
     * @allow (get) - Authenticated user reads their own profile.
     * @deny (create) - Authenticated user attempts to create a profile with a customerId that does not match their auth.uid.
     * @deny (update, delete) - Any user attempts to modify or delete a customer profile without being the owner.
     * @principle Enforces document ownership; only the authenticated user can create, read, update, or delete their own profile.
     */
    match /customers/{customerId} {
      // Utility function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Utility function to check if the user is the owner of the document
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
      
      // Utility function to check if the user is the existing owner of the document
      function isExistingOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(customerId);
      allow list: if false; // Prevent listing of all customers
      allow create: if isOwner(customerId);
      allow update: if isExistingOwner(customerId); // Enforce immutable customerId
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Manages access to tax documents associated with a specific customer.
     * @path /customers/{customerId}/taxDocuments/{taxDocumentId}
     * @allow (create) - Authenticated user creates a tax document under their own customer ID.
     * @allow (get) - Authenticated user reads tax documents under their own customer ID.
     * @deny (create) - Authenticated user attempts to create a tax document under a different customer ID.
     * @deny (update, delete) - Any user attempts to modify or delete a tax document without being the owner.
     * @principle Enforces strict document ownership; only the owning customer can manage their tax documents.
     */
    match /customers/{customerId}/taxDocuments/{taxDocumentId} {
            // Utility function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Utility function to check if the user is the owner of the document
      function isOwner(customerId) {
        return isSignedIn() && request.auth.uid == customerId;
      }
      
      // Utility function to check if the user is the existing owner of the document
      function isExistingOwner(customerId) {
        return isSignedIn() && request.auth.uid == customerId;
      }

      allow get: if isOwner(customerId);
      allow list: if false;
      allow create: if isOwner(customerId);
      allow update: if isExistingOwner(customerId); // Enforce immutable customerId
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Manages access to appointment documents. Allows public creation but restricts listing.
     * @path /appointments/{appointmentId}
     * @allow (create) - Unauthenticated or authenticated user creates a new appointment request.
     * @deny (get, list) - Any user attempts to read or list appointments.
     * @deny (update, delete) - Any user attempts to modify or delete an appointment.
     * @principle Allows public submissions but restricts access to prevent unauthorized data exposure.
     */
    match /appointments/{appointmentId} {
            // Utility function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if false;
      allow list: if false;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to referral documents. Allows public creation but restricts listing.
     * @path /referrals/{referralId}
     * @allow (create) - Unauthenticated or authenticated user creates a new referral.
     * @deny (get, list) - Any user attempts to read or list referrals.
     * @deny (update, delete) - Any user attempts to modify or delete a referral.
     * @principle Allows public submissions but restricts access to prevent unauthorized data exposure.
     */
    match /referrals/{referralId} {
            // Utility function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if false;
      allow list: if false;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to site settings, specifically tax forms.
     * @path /siteSettings/taxForms
     * @allow (get, list) - Any user can read the site settings.
     * @deny (create, update, delete) - No user can create, update, or delete site settings.
     * @principle Provides public read access to site configuration while preventing unauthorized modifications.
     */
    match /siteSettings/{document} {
            // Utility function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}